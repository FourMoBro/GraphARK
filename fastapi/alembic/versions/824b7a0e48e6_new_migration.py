"""New Migration

Revision ID: 824b7a0e48e6
Revises: 
Create Date: 2021-08-20 14:56:54.524968

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '824b7a0e48e6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('figi', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stocks_id'), 'stocks', ['id'], unique=False)
    op.drop_table('index_holdings')
    op.drop_table('indices')
    op.drop_table('etf_holdings')
    op.drop_table('stock_prices')
    op.drop_table('patterns')
    op.drop_table('tickers')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tickers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tickers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('figi', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tickers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('patterns',
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('cdl2crows', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3blackcrows', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3inside', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3linestrike', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3outside', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3starsinsouth', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdl3whitesoldiers', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlabandonedbaby', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdladvanceblock', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlbelthold', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlbreakaway', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlclosingmarubozu', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlconcealbabyswall', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlcounterattack', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdldarkcloudcover', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdldoji', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdldojistar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdldragonflydoji', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlengulfing', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdleveningdojistar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdleveningstar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlgapsidesidewhite', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlgravestonedoji', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhammer', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhangingman', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlharami', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlharamicross', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhighwave', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhikkake', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhikkakemod', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlhomingpigeon', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlidentical3crows', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlinneck', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlinvertedhammer', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlkicking', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlkickingbylength', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlladderbottom', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdllongleggeddoji', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdllongline', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlmarubozu', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlmatchinglow', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlmathold', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlmorningdojistar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlmorningstar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlonneck', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlpiercing', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlrickshawman', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlrisefall3methods', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlseparatinglines', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlshootingstar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlshortline', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlspinningtop', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlstalledpattern', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlsticksandwich', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdltakuri', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdltasukigap', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlthrusting', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdltristar', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlunique3river', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlupsidegap2crows', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('cdlxsidegap3methods', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stock_id'], ['tickers.id'], name='fk_stock'),
    sa.PrimaryKeyConstraint('stock_id', 'dt', name='patterns_pkey')
    )
    op.create_table('stock_prices',
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('open', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('high', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('low', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('close', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=False),
    sa.Column('volume', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], ['tickers.id'], name='fk_stock'),
    sa.PrimaryKeyConstraint('stock_id', 'dt', name='stock_prices_pkey')
    )
    op.create_table('etf_holdings',
    sa.Column('etf_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('holding_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dt', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('shares', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['etf_id'], ['tickers.id'], name='fk_etf'),
    sa.ForeignKeyConstraint(['holding_id'], ['tickers.id'], name='fk_holding'),
    sa.PrimaryKeyConstraint('etf_id', 'holding_id', 'dt', name='etf_holdings_pkey')
    )
    op.create_table('indices',
    sa.Column('symbol', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('indices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='indices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('index_holdings',
    sa.Column('index_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('holding_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dt', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('shares', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['holding_id'], ['tickers.id'], name='fk_holding'),
    sa.ForeignKeyConstraint(['index_id'], ['indices.id'], name='fk_etf'),
    sa.PrimaryKeyConstraint('index_id', 'holding_id', 'dt', name='index_holdings_pkey')
    )
    op.drop_index(op.f('ix_stocks_id'), table_name='stocks')
    op.drop_table('stocks')
    # ### end Alembic commands ###
